name: Deploy - TST - Automático

on:
    workflow_dispatch:
    push:
        branches: ["develop"]

# A workflow run is made up of one or more jobs that can run sequentially ou in parallel
jobs:
    build:
        runs-on: ubuntu-latest

        if: github.ref == 'refs/heads/develop'

        env:
            NODE_OPTIONS: --max_old_space_size=8000

        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 2

            - uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Install jq
              run: sudo apt-get install jq

            - name: Identify changed folders
              id: changed_folders
              run: |
                CHANGED_FOLDERS=$(git diff --name-only HEAD~1 HEAD | grep '/' | cut -d'/' -f1 | grep -v '^\.github$' | sort -u | tr '\n' ' ')
                echo "Changed folders: $CHANGED_FOLDERS"
                echo "CHANGED_FOLDERS=$CHANGED_FOLDERS" >> $GITHUB_ENV

            - name: Install dependencies and remove specific modules
              run: |
                  for folder in ${{ github.event.inputs.list_sse_names }}; do
                  cd $folder
                  npm install
                  ignoreConflict=$(jq -r '.ignoreConflict // "false"' package.json)
                  if [ "$ignoreConflict" != "true" ]; then
                    modules_to_remove=("winston" "express" "nconf" "https-proxy-agent")
                    for module in "${modules_to_remove[@]}"; do
                      module_path="node_modules/$module"
                      if [ -d "$module_path" ]; then
                        rm -rf "$module_path"
                        echo "O módulo $module foi removido de $folder."
                      else
                        echo "O módulo $module não está instalado em $folder."
                      fi
                    done
                  fi
                  cd ..
                  done

            - name: Zip changed folders
              run: |
                  for folder in ${{ env.CHANGED_FOLDERS }}; do
                    cd $folder
                    zip -r "../${folder}.zip" ./*
                    cd ..
                  done

            - name: Authenticate with OCC and Upload to Server Extensions
              env:
                  OCC_ENDPOINT: ${{ secrets.OCC_TST_ENDPOINT }}
                  OCC_API_TOKEN: ${{ secrets.OCC_TST_API_TOKEN }}
              run: |
                  OCC_ACCESS_TOKEN=$(curl -X POST -H "Authorization: Bearer $OCC_API_TOKEN" -d "grant_type=client_credentials" "$OCC_ENDPOINT/ccadmin/v1/login/" | jq -r '.access_token')
                  echo "OCC Access Token: $OCC_ACCESS_TOKEN"
                  echo "Mandando zip code"

                  for folder in ${{ env.CHANGED_FOLDERS }}; do
                    zip_file="${folder}.zip"
                    echo "Enviando $zip_file para $OCC_ENDPOINT/ccadmin/v1/serverExtensions"
                    curl -X POST -H "Authorization: Bearer $OCC_ACCESS_TOKEN" -F "fileUpload=@${GITHUB_WORKSPACE}/${zip_file}" -F "filename=${zip_file}" -F "force=true" -F "uploadType=extensions" "$OCC_ENDPOINT/ccadmin/v1/serverExtensions"
                    sleep 120
                  done
