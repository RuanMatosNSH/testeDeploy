name: Deploy - TST - Automático

# Controls when the workflow will run
on:
  workflow_dispatch:
  push:
    branches: [ "develop" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # To ensure that it will only run from the develop branch
    if: github.ref == 'refs/heads/develop'

    env:
      NODE_OPTIONS: --max_old_space_size=8000

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0

      - name: Install yarn
        run: npm install -g yarn

      - name: Install jq
        run: sudo apt-get install jq

      - name: Identify changed folders
        id: changed_folders
        run: |
          CHANGED_FOLDERS=$(git diff --name-only HEAD~1 HEAD | grep '/' | cut -d'/' -f1 | grep -v '^\.github$' | sort -u | tr '\n' ' ')
          echo "Changed folders: $CHANGED_FOLDERS"
          echo "CHANGED_FOLDERS=$CHANGED_FOLDERS" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          for folder in ${{ env.CHANGED_FOLDERS }}; do
            cd $folder
            yarn install
            cd ..
          done

      - name: Check and remove specific modules
        run: |
          for folder in ${{ env.CHANGED_FOLDERS }}; do
            cd $folder
            # Lista de módulos a serem removidos
            modules_to_remove=("winston" "express" "nconf" "https-proxy-agent")

            for module in "${modules_to_remove[@]}"; do
              # Verifica se o módulo está instalado antes de tentar removê-lo
              if yarn list --depth=0 | grep -q $module; then
                yarn remove $module
              else
                echo "O módulo $module não está instalado em $folder."
              fi
            done

            cd ..
          done

      - name: Zip changed folders
        run: |
          for folder in ${{ env.CHANGED_FOLDERS }}; do
            cd $folder
            zip -r "../${folder}.zip" ./*
            cd ..
          done

      - name: Authenticate with OCC and Upload to Server Extensions
        env:
          OCC_ENDPOINT: ${{ secrets.OCC_TST_ENDPOINT }}
          OCC_API_TOKEN: ${{ secrets.OCC_TST_API_TOKEN }}
        run: |
          OCC_ACCESS_TOKEN=$(curl -X POST -H "Authorization: Bearer $OCC_API_TOKEN" -d "grant_type=client_credentials" "$OCC_ENDPOINT/ccadmin/v1/login/" | jq -r '.access_token')
          echo "OCC Access Token: $OCC_ACCESS_TOKEN"
          echo "Mandando zip code"

          for folder in ${{ env.CHANGED_FOLDERS }}; do
            zip_file="${folder}.zip"
            curl -X POST -H "Authorization: Bearer $OCC_ACCESS_TOKEN" -F "fileUpload=@${zip_file}" -F "filename=${zip_file}" -F "force=true" -F "uploadType=extensions" "$OCC_ENDPOINT/ccadmin/v1/serverExtensions"
          done
