
name: Deploy - DEV

# Controls when the workflow will run
on:
  pull_request:
    types:
      - synchronize
      - closed

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # To ensure that it will only run from the develop branch
    if: github.ref == 'refs/heads/develop'

    env:
      NODE_OPTIONS: --max_old_space_size=8000

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0

      - name: Install yarn
        run: npm install -g yarn

      - name: Debug
        run: |
          echo "OCC_ENDPOINT: $OCC_ENDPOINT"
          echo "OCC_API_TOKEN: $OCC_API_TOKEN"

      - name: Install jq
        run: sudo apt-get install jq

      - name: Fetch changes
        run: git fetch origin ${{ github.event.before }}:${{ github.event.before }}

      - name: Get base commit
        id: get_base_commit
        run: echo "BASE_COMMIT=$(git rev-list -n 1 origin/develop)" >> $GITHUB_ENV

      - name: Identify changed folders
        id: changed_folders
        run: |
          BASE_BRANCH=${{ github.event.before ||  github.base_ref }}
          CHANGED_FOLDERS=$(git diff --name-only $BASE_BRANCH HEAD | grep / | cut -d/ -f1 | sort -u)
          echo "Changed folders: $CHANGED_FOLDERS"
          echo "::set-output name=changed_folders::$CHANGED_FOLDERS"

      - name: Install dependencies
        run: |
          for folder in ${{ steps.changed_folders.outputs.changed_folders }}; do
            cd $folder
            yarn install
            cd ..
          done

      - name: Check and remove specific modules
        run: |
          for folder in ${{ steps.changed_folders.outputs.changed_folders }}; do
            cd $folder
            # Lista de m√≥dulos a serem removidos
            modules_to_remove=("winston" "express" "nconf" "https-proxy-agent")

            for module in "${modules_to_remove[@]}"; do
              yarn remove $module
            done

            cd ..
          done

      - name: Zip changed folders
        run: |
          for folder in ${{ steps.changed_folders.outputs.changed_folders }}; do
            cd $folder
            zip -r "$folder.zip" *
            cd ..
          done

      - name: Display contents of ZIP files
        run: |
          for zip_file in $(find . -type f -name '*.zip'); do
            unzip -l "$zip_file"
          done

      - name: Authenticate with OCC and Upload to Server Extensions
        env:
          OCC_ENDPOINT: ${{ secrets.OCC_ENDPOINT }}
          OCC_API_TOKEN: ${{ secrets.OCC_API_TOKEN }}
        run: |
          OCC_ACCESS_TOKEN=$(curl -X POST -H "Authorization: Bearer $OCC_API_TOKEN" -d "grant_type=client_credentials" "$OCC_ENDPOINT/ccadmin/v1/login/" | jq -r '.access_token')
          echo "OCC Access Token: $OCC_ACCESS_TOKEN"
          echo "Mandando zip code"

          for zip_file in $(find . -type f -name '*.zip'); do
            curl -X POST -H "Authorization: Bearer $OCC_ACCESS_TOKEN" -F "fileUpload=@$zip_file"  -F "filename=$(basename $zip_file)" -F "force=true" -F "uploadType=extensions" "$OCC_ENDPOINT/ccadmin/v1/serverExtensions"
          done
